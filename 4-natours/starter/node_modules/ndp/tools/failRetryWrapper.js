const chalk = require('chalk');
const wait = require('./wait');

const failRetryWrapper = ({
  fn = () => {},
  maxRetry = 1,
  retryInterval = 0,
} = {}) => {
  const notFinishFlag = '_@#$notFinished__';
  if (typeof fn !== 'function') {
    throw new Error('fn必须是待执行函数');
  }
  if (!Number.isInteger(maxRetry) || !Number.isInteger(retryInterval)) {
    throw new Error('第二，第三个参数是重试次数和延迟重试时间，数字');
  }

  return async (...args) => {
    let retry = 1;
    let result = notFinishFlag;
    let lastError = null;
    while (retry <= maxRetry && result === notFinishFlag) {
      try {
        result = await fn(...args);
      } catch (error) {
        lastError = error;
        const msg = `执行${chalk.yellow(fn.name)}${chalk.red(
          '失败',
        )}${chalk.red(retry)}次 `;
        console.log(`${msg}\n`);
        if (retry < maxRetry && retryInterval > 0) {
          await wait(retryInterval);
        }
      }
      retry += 1;
    }
    if (result !== notFinishFlag) {
      return result;
    }
    throw lastError;
  };
};

module.exports = failRetryWrapper;
