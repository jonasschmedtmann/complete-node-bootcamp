const fetch = require('node-fetch');
const AbortContoller = require('abort-controller');

const checkResponse = response => {
  if (typeof response !== 'object') {
    throw new Error('res返回不是对象');
  }
  if (!response.ok) {
    throw new Error(
      `网络请求不成功，code:${response.status}, msg:${response.statusText} \nurl: ${response.url}:`,
    );
  }
};

const checkServerJson = res => {
  if (typeof res !== 'object') {
    throw new Error('服务端json不是对象');
  }
  if (res.code !== 200) {
    throw new Error(`服务端数据错误 code:${res.code} message${res.message}`);
  }
};

const setOption = inputOpt => {
  const opt = {
    ...inputOpt,
    headers: {
      'content-type': 'application/json',
      ...(inputOpt.headers || {}),
    },
  };
  if (
    typeof opt.method === 'string' &&
    opt.method.toLowerCase() === 'post' &&
    opt.headers['content-type'] === 'application/json' &&
    ![null, undefined].includes(opt.body)
  ) {
    opt.body = JSON.stringify(opt.body);
  }
  return opt;
};

const sendRequest = async (url, inputOpt = {}) => {
  const controller = new AbortContoller();
  const defaultTimeout = 2000;
  const timeout = setTimeout(() => {
    controller.abort();
  }, inputOpt.timeout || defaultTimeout);
  const opt = setOption(inputOpt);
  try {
    const response = await fetch(url, opt);
    clearTimeout(timeout);
    checkResponse(response);
    let json = null;
    if (opt.headers['content-type'] === 'application/json') {
      json = await response.json();
      if (!opt.external) {
        checkServerJson(json);
      }
    }
    return { response, json };
  } finally {
    clearTimeout(timeout);
  }
};

module.exports = sendRequest;
