const fs = require('fs');
const path = require('path');
const logger = require('./logger');
const isValidString = require('./isValidString');
const { validEnv, dotFileName, dotPrefixEnv } = require('./EnvConfig');

class Env {
  constructor(apiEnv = {}) {
    this.validEnv = { ...validEnv };
    this.envNames = Object.keys(this.validEnv);
    this.dotFile = dotFileName;
    this.dotPrefixEnv = dotPrefixEnv;
    this.initEnv(apiEnv);
  }

  initEnv(apiEnv) {
    const argv = {
      ...this.getNodeArgv(),
      ...this.getNpmArgv(),
    };
    const dotPrefix = argv[this.dotPrefixEnv] || apiEnv[this.dotPrefixEnv];
    this.setDefaultEnv();
    this.setDotEnv(dotPrefix);
    this.setApiEnv(apiEnv);
    this.setCommandArgsEnv(argv);
    this.checkRequired();
  }

  print() {
    this.envNames.forEach(name => {
      console.log(`${name}:${process.env[name]}`);
    });
  }

  checkRequired() {
    const msg = [];
    this.envNames.forEach(name => {
      if (this.validEnv[name].isRequired) {
        if (!isValidString(process.env[name])) {
          msg.push(name);
        }
      }
    });
    if (msg.length > 0) {
      throw new Error(`环境变量必须设置:${msg.join(',')}`);
    }
  }

  setApiEnv(apiEnv) {
    if (typeof apiEnv === 'object' && Object.keys(apiEnv).length > 0) {
      Object.keys(apiEnv).forEach(name => {
        this.setEnv(name, apiEnv[name]);
      });
      logger.success('设置api env成功');
    }
  }

  setDefaultEnv() {
    this.envNames.forEach(name => {
      if (this.validEnv[name].dValue !== undefined) {
        this.setEnv(name, this.validEnv[name].dValue);
      }
    });
  }

  isValidName(name) {
    if (this.validEnv[name] !== undefined) {
      return true;
    }
    throw new Error(`${name}不是有效环境变量，使用${this.envNames}`);
  }

  /* eslint-disable class-methods-use-this */
  setEnv(name, value) {
    if (isValidString(name)) {
      process.env[name] = value;
    } else {
      throw new Error(`${name}值${value}错误`);
    }
  }

  getEnv(name) {
    if (this.isValidName(name)) {
      switch (this.validEnv[name].type) {
        case 'Integer':
          return Number(process.env[name]);
        default:
          return process.env[name];
      }
    }
    return '';
  }

  setDotEnv(dotPrefix) {
    const cwd = process.cwd();
    const dotFiles = [path.join(cwd, this.dotFile)];
    if (isValidString(dotPrefix)) {
      dotFiles.push(path.join(cwd, `.${dotPrefix}${this.dotFile}`));
    }
    dotFiles.forEach(dotFile => {
      if (fs.existsSync(dotFile)) {
        const file = fs.readFileSync(dotFile, 'utf-8');
        for (const line of file.split('\n')) {
          const matched = line.trim().match(/^([^#]*)/u);
          if (matched && matched[1]) {
            const envValue = matched[1].trim();
            const [name, value] = envValue.split('=');
            if (this.isValidName(name)) {
              this.setEnv(name, value);
            }
          }
        }
        logger.success('设置dotEnv成功');
      } else {
        logger.error(`没找到${dotFile}`);
      }
    });
  }

  getNpmArgv() {
    const { env } = process;
    const result = {};
    if (typeof env === 'object') {
      this.envNames.forEach(name => {
        const value = env[`npm_config_${name.toUpperCase()}`];
        if (isValidString(value) && isValidString(name)) {
          result[name.toUpperCase()] = value;
        }
      });
    }
    return result;
  }

  getNodeArgv() {
    if (process && Array.isArray(process.argv)) {
      const argv = process.argv.slice(2);
      const result = {};
      argv.forEach(arg => {
        if (typeof arg === 'string') {
          const [, key, value] =
            arg.trim().match(/^--(\w+)(?:=(.*?))?$/u) || [];
          if (
            isValidString(key) &&
            isValidString(value) &&
            this.envNames.find(name => name === key.toUpperCase())
          ) {
            result[key.toUpperCase()] = value;
          }
        }
      });
      return result;
    }
    return {};
  }

  setCommandArgsEnv(envObj) {
    const argv = process.argv.slice(2);
    const input = [];
    argv.forEach(arg => {
      const [, key, value = true] =
        arg.trim().match(/^--(\w+)(?:=(.*?))?$/u) || [];
      if (key) {
        input.push({ key, value });
      }
    });
    if (input.length > 0) {
      Object.keys(envObj).forEach(name => this.setEnv(name, envObj[name]));
      logger.success('命令行参数设置成功');
    }
  }
}

module.exports = Env;
