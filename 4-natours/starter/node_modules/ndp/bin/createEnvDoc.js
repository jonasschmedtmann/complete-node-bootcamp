const fs = require('fs');
const path = require('path');
const { validEnv, dotFileName } = require('../tools/EnvConfig');
const { error, success } = require('../tools/logger');

const createTable = () => {
  const header = ['名称', '必须', '描述', '默认值'];
  const headerLine = header.map(() => '---');
  const table = Object.keys(validEnv).map(name => {
    const { desc, isRequired, dValue = '无', dValueDesc } = validEnv[name];
    return [name, isRequired ? '是' : '否', desc, dValueDesc || dValue];
  });
  return [
    `|${header.join('|')}|`,
    `|${headerLine.join('|')}|`,
    table.map(cols => `|${cols.join('|')}|`).join('\n'),
  ].join('\n');
};

const createTemplate = table => `
# 环境变量

本工具所有的参数都以环境变量的形式存放，无论 \`命令行\` 还是\`api调用\`，都需要根据需求预设

## 所有可用的变量如下：

${table}

## 必填环境变量来源

### NDP_USR, NDP_SID,NDP_KEY

下图中责任人的邮箱前缀对应 \`NDP_USER\`

云信账号后面的数字对应 \`NDP_SID\`

三个秘钥选一个对应 \`NDP_KEY\`

![](./stonedetail.png)

### NDP_CID

点集群名称的连接，该 url 包含 clusterid 字段对应 \`NDP_CID\`

![](./getId.png)

### NDP_DOT_PRE

额外读取配置文件的前缀

举个例子 \`ndp-deploy --NDP_DOT_PRE=dev\`

那么除了读取\`${dotFileName}\`文件外，还会读取\`.dev${dotFileName}\`并覆盖

目的是为了在多个环境之前设置默认值，并切换

比如项目里有线上，开发和测试环境，对应不同的ndp设置，那么你可以创建

三个文件，然后通过程序参数，来切换：

      ndp-deploy --NDP_DOT_PRE=dev
      ndp-deploy --NDP_DOT_PRE=master
      ndp-deploy --NDP_DOT_PRE=test

你可以把他们弄成不同的npm命令

`;

const createEnvDoc = () => {
  try {
    const table = createTable();
    const template = createTemplate(table);
    fs.writeFileSync(path.join(__dirname, '../doc/env.md'), template);
    success('创建env文档成功');
  } catch (createDocError) {
    error(createDocError);
  }
};

createEnvDoc();
