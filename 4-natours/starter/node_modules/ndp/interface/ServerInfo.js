const getContent = require('./utils/getContent');
const Interface = require('./Interface');

class ServerInfo extends Interface {
  constructor({
    urlPath = '/NDP/deployStatus',
    urlName = '获取实例发布状态',
    env,
  } = {}) {
    super({ urlPath, urlName, env });
  }

  collectInfo(serverStatus) {
    const content = getContent(serverStatus);
    if (!Array.isArray(content.batchGroupList)) {
      throw new Error(this.wrongDataWarning('data->batchGroupList'));
    }
    return content.batchGroupList.map(group => {
      if (
        !typeof group === 'object' ||
        !Number.isInteger(group.seq) ||
        !Array.isArray(group.instanceList)
      ) {
        throw new Error(
          this.wrongDataWarning('data->batchGroupList->seq,instanceList'),
        );
      }
      const { seq, instanceList } = group;
      return {
        deployWeight: seq,
        servers: instanceList.map(instance => {
          const { targetTemplateId, hostSn, instanceId } = instance;
          if (
            !Number.isInteger(targetTemplateId) ||
            !Number.isInteger(hostSn) ||
            !Number.isInteger(instanceId)
          ) {
            throw new Error(
              this.wrongDataWarning(
                'data->batchGroupList->instanceList->targetTemplateId,hostSn,instanceId',
              ),
            );
          }
          return {
            templateId: targetTemplateId,
            sn: hostSn,
            serverId: instanceId,
          };
        }),
      };
    });
  }

  async getConfig(clusterId) {
    if (!Number.isInteger(clusterId)) {
      throw new Error('无效clusterId');
    }
    const { json: serverStatus } = await this.sendRequest({
      urlArgs: { clusterId },
    });
    return this.collectInfo(serverStatus);
  }
}

module.exports = ServerInfo;
