const getContent = require('./utils/getContent');
const isValidString = require('../tools/isValidString');
const wait = require('../tools/wait');
const logger = require('../tools/logger');
const Interface = require('./Interface');

const smallTime = ms => {
  if (!Number.isInteger(ms)) {
    throw new Error('不是时间数字');
  }
  const jsDate = new Date(ms);
  return `${jsDate.getMonth() +
    1}/${jsDate.getDate()}-${jsDate.getHours()}:${jsDate.getMinutes()}`;
};

const once = fn => {
  let flag = false;
  return function _once() {
    if (flag === false) {
      flag = true;
      fn();
    }
  };
};
class Cluster extends Interface {
  constructor({
    urlPath = '/NDP/clusterStatus',
    urlName = '查询集群状态',
    env,
  } = {}) {
    super({ urlPath, urlName, env });
    this.defaultInterval = 100;
    this.buildErrorMsg = workflowId => `构建失败_workId${workflowId}_workId`;
  }

  async queryStatus(clusterId) {
    const { json } = await this.sendRequest({ urlArgs: { clusterId } });
    return json;
  }

  getCurrentStatus(serverStatus) {
    const { currentStatus } = getContent(serverStatus);
    if (typeof currentStatus !== 'object') {
      throw new Error(this.wrongDataWarning('data->currentStatus'));
    }
    if (!Array.isArray(currentStatus.batchGroupList)) {
      throw new Error(
        this.wrongDataWarning('data->currentStatus->batchGroupList'),
      );
    }
    return currentStatus.batchGroupList.reduce((acc, batch) => {
      if (!batch || !Array.isArray(batch.instanceList)) {
        throw new Error(
          this.wrongDataWarning(
            'data->currentStatus->batchGroupList->instanceList',
          ),
        );
      }
      batch.instanceList.forEach(
        ({
          lastDeployTime,
          lastDeployStatus,
          branch,
          commitTime,
          version,
        } = {}) => {
          if (lastDeployStatus !== 'finish') {
            throw new Error('发布失败');
          }
          const last4 = -4;
          acc.push({
            branch,
            hash: `${version.slice(0, 4)}..${version.slice(last4)}`,
            deploy: smallTime(lastDeployTime),
            commit: smallTime(commitTime),
          });
        },
      );
      return acc;
    }, []);
  }

  getWorkStatus(serverStatus) {
    switch (getContent(serverStatus).type) {
      case 0:
        return '构建';
      case 1:
        return '发布';
      case 2:
        return '无任务';
      default:
        throw new Error(this.wrongDataWarning('data->type'));
    }
  }

  isIdle(serverStatus) {
    return this.getWorkStatus(serverStatus) === '无任务';
  }

  isBuild(serverStatus) {
    return this.getWorkStatus(serverStatus) === '构建';
  }

  isDeploy(serverStatus) {
    return this.getWorkStatus(serverStatus) === '发布';
  }

  checkBuildStatus(serverStatus) {
    const content = getContent(serverStatus);
    if (typeof content.buildStatus !== 'object') {
      throw new Error(this.wrongDataWarning('data->buildStatus'));
    }
    const {
      buildStatus: { status, errorMsg, workflowId },
    } = content;
    if (!isValidString(status) || !Number.isInteger(workflowId)) {
      throw new Error(
        this.wrongDataWarning('data->buildStatus->status,workflowId'),
      );
    }
    if (status === 'error') {
      throw new Error(`${this.buildErrorMsg(workflowId)}:${errorMsg}`);
    }
  }

  getBuildErrorWorkId(buildError) {
    const regstr = this.buildErrorMsg('(\\d+?)');
    if (buildError && new RegExp(regstr, 'u').test(buildError.message)) {
      return buildError.message.match(new RegExp(regstr, 'u'))[1];
    }
    return null;
  }

  getDeployBatchList(serverStatus) {
    const content = getContent(serverStatus);
    const { deployStatus } = content;
    if (typeof deployStatus !== 'object') {
      throw new Error(this.wrongDataWarning('data->deployStatus'));
    }
    const { batchGroupList, status } = deployStatus;
    if (!Array.isArray(batchGroupList) || !isValidString(status)) {
      throw new Error(
        this.wrongDataWarning('data->deployStatus->batchGroupList'),
      );
    }
    return { batchGroupList, status };
  }

  checkDeployInfo(batchGroupList) {
    batchGroupList.forEach(cur => {
      this.checkInstanceList(cur);
      cur.instanceList.forEach(server => {
        if (typeof server !== 'object' || !isValidString(server.deployStatus)) {
          throw new Error(
            this.wrongDataWarning(
              'data->deployStatus->batchGroupList->instanceList->deployStatus',
            ),
          );
        }
        if (server.deployStatus === 'error') {
          throw new Error(server.lastErrorReason);
        }
      });
    });
  }

  checkInstanceList(cur) {
    if (typeof cur !== 'object' || !Array.isArray(cur.instanceList)) {
      throw new Error(
        this.wrongDataWarning(
          'data->deployStatus->batchGroupList->instanceList',
        ),
      );
    }
  }

  checkDeployStatus(serverStatus) {
    const { batchGroupList } = this.getDeployBatchList(serverStatus);
    this.checkDeployInfo(batchGroupList);
  }

  async queryUnitIdle({
    clusterId,
    whenBuildInfo = '构建..',
    whenDeployInfo = '发布..',
    queryInterval = this.defaultInterval,
  }) {
    if (!Number.isInteger(clusterId)) {
      throw new Error('无效clusterId');
    }
    let serverInfo = null;
    let idle = false;
    const start = new Date();
    const isBuilding = once(() => logger.info(whenBuildInfo));
    const isDeploying = once(() => {
      logger.success('构建成功');
      logger.info(whenDeployInfo);
    });
    do {
      if (new Date() - start > 5 * 60 * 1000) {
        throw new Error('获取状态超时');
      }
      await wait(queryInterval);
      serverInfo = await this.queryStatus(clusterId);
      if (this.isBuild(serverInfo)) {
        isBuilding();
        this.checkBuildStatus(serverInfo);
      }
      if (this.isDeploy(serverInfo)) {
        isDeploying();
        this.checkDeployStatus(serverInfo);
      }
      idle = this.isIdle(serverInfo);
    } while (idle === false);
    return serverInfo;
  }
}

module.exports = Cluster;
