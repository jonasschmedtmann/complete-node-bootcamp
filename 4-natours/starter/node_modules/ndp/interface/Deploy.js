const wait = require('../tools/wait');
const logger = require('../tools/logger');
const Interface = require('./Interface');

class Deploy extends Interface {
  constructor({
    urlPath = '/NDP/buildAndDeploy',
    urlName = '一键发布',
    cluster,
    serverInfo,
    cancelBuild,
    env,
  } = {}) {
    super({ urlPath, urlName, env });
    if (!cluster || !serverInfo || !cancelBuild) {
      throw new Error('Deploy构造函数没有传实例');
    }
    this.cluster = cluster;
    this.serverInfo = serverInfo;
    this.cancelBuild = cancelBuild;
  }

  async createRequestOpt({ hash, clusterId, branch }) {
    const batchInfo = await this.serverInfo.getConfig(clusterId);
    return {
      clusterId,
      targetVersion: hash,
      branch,
      batchList: Deploy.creatBatchList(batchInfo),
    };
  }

  static creatBatchList(batchInfo) {
    return batchInfo.map(({ deployWeight, servers } = {}) => {
      return {
        seq: deployWeight,
        continueIfSuccess: true,
        instanceList: servers.map(({ sn, serverId, templateId } = {}) => ({
          hostSn: sn,
          instanceId: serverId,
          destTemplateId: templateId,
        })),
      };
    });
  }

  async deployRequest({ hash, clusterId, branch }) {
    const opt = await this.createRequestOpt({
      hash,
      clusterId,
      branch,
    });
    this.sendRequest({ requestOpt: { method: 'POST', body: opt } });
  }

  /* eslint-disable no-param-reassign */
  async deploy({ hash = '', clusterId, branch = '' } = {}) {
    clusterId = Number(clusterId);
    if (!Number.isInteger(clusterId)) {
      throw new Error('输入集群id');
    }
    try {
      await this.cluster.queryUnitIdle({
        clusterId: Number(clusterId),
        whenBuildInfo: '其他人在构建中,稍等..',
        whenDeployInfo: '其他人在发布中,稍等...',
      });
    } catch (error) {
      const workFlowId = Number(this.cluster.getBuildErrorWorkId(error));
      if (workFlowId) {
        logger.info('上次构建失败,取消构建');
        await this.cancelBuild.cancel(clusterId, workFlowId);
        logger.success('取消成功');
      } else {
        throw error;
      }
    }
    logger.info(
      `\n\t集群id:${clusterId}\n\t分支:${branch ||
        '默认分支'}\n\t代码版本:${hash || '最新提交'}\n`,
    );
    await this.deployRequest({ hash, clusterId, branch });
    logger.success('发布指令发送成功');
    logger.info('检查发布状态..');
    const interFaceDelay = 1000;
    await wait(interFaceDelay);
    const serverInfo = await this.cluster.queryUnitIdle({
      clusterId,
      whenBuildInfo: '正在构建中..',
      whenDeployInfo: '正在发布中..',
    });
    console.table(this.cluster.getCurrentStatus(serverInfo));
    logger.success('发布成功');
  }
}

module.exports = Deploy;
